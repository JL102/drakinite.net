#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('./app');
var http = require('http');
var https = require('https');
var fs = require('fs');
const ws = require('ws');
const LDC = require('./scripts/lupusDumbCounter');

/**
 * Get port from environment and store in Express.
 */

for(var i = 0; i < process.argv.length; i++){
  switch(process.argv[i]){
    case '-port':
    case '--port':
      process.env.PORT = process.argv[i+1];
      break;
  } 
}

process.env.PORT = process.env.PORT || '80';
var httpPort = normalizePort(process.env.PORT || '80');

//var port = normalizePort(process.env.PORT || '80');
//app.set('port', port);

if(fs.existsSync("D:\\letsencrypt\\fullchain.pem")
  && fs.existsSync("D:\\letsencrypt\\privkey.pem")){
     
  const credentials = {
    cert: fs.readFileSync("D:\\letsencrypt\\fullchain.pem"),
    key: fs.readFileSync("D:\\letsencrypt\\privkey.pem")
  }
  var httpsServer = https.createServer(credentials, app);
  httpsServer.listen(443);
}

var redirect = require('express')();
redirect.use('/', require('express').Router().get('/',function(req, res){
  //res.redirect('https://' + req.headers.host + req.url);
  res.sendStatus(200);
}));

var httpServer = http.createServer(app);
httpServer.listen(httpPort);

// Set up a headless websocket server that prints any
// events that come in.
const wsServer = new ws.Server({ noServer: true });
wsServer.on('connection', socket => {
  // socket.on('message', message => {
  //   console.log('WS Server MSG', message);
  // });
  LDC.addWebsocket(socket);
});
wsServer.on('error', err => {
  console.error('WS Server error', err);
});

// `server` is a vanilla Node.js HTTP server, so use
// the same ws upgrade process described here:
// https://www.npmjs.com/package/ws#multiple-servers-sharing-a-single-https-server
httpServer.on('upgrade', (req, socket, head) => {
  console.log('Upgrade event http! req.url=' + req.url);
  // LupusDumbCounter socket
  if (req.url === '/LDC') {
    return wsServer.handleUpgrade(req, socket, head, socket => {
      wsServer.emit('connection', socket, req);
    });
  }
  else {
    console.warn('Unknown http upgrade request! (Nextcloud should not be doing upgrades from HTTP) req.url=' + req.url);
  }
});
httpServer.on('error', err => {
  console.error('HTTP Server error', err);
});

if (httpsServer) {
  httpsServer.on('upgrade', (req, socket, head) => {
    console.log('Upgrade event https! req.url=' + req.url);
    
    // LupusDumbCounter socket
    if (req.url === '/LDC') {
      return wsServer.handleUpgrade(req, socket, head, socket => {
        wsServer.emit('connection', socket, req);
      });
    }
    
    // NextCloud socket
    if (app.proxyServer) {
      // console.log('Proxying ws!');
      try {
        app.proxyServer.ws(req, socket, head, {}, app.proxyOnError);
      }
      catch (err) {
        console.error('Caught WS error in try-catch', err);
      }
    }
    else {
      console.error('App didn\'t export the proxy server instance!');
    }
  });
  httpsServer.on('error', err => {
    console.error('HTTPS Server error', err);
  });
}
//server.on('error', onError);
//server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

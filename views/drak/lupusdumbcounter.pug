html
head
	link(href='/css/fonts.css?v=1', rel='stylesheet')
	link(href='/css/w3.css', rel='stylesheet')
	script(src='/js/jquery.min.js')
	script(src='/js/reconnecting-websocket.js')
	style.
		#message{
			color: #F5D36D;
			text-shadow:
				-1.414px -1.414px 0 #000,
				0   -2px 0 #000,
				1.414px -1.414px 0 #000,
				2px  0   0 #000,
				1.414px  1.414px 0 #000,
				0    2px 0 #000,
				-1.414px  1.414px 0 #000,
				-2px  0   0 #000;
			font-size: 90px;
			position: relative;
			top: -120px;
		}
body
	audio(id="audio" src="/sounds/Ding.wav" volume="0.2")
	audio(id="audioreversed" src="/sounds/Ding-Reversed.wav" volume="0.2")
	div(id="message")
		p(class="Allan")
			//img(class="yzma" src="/images/dumbstuff/yzma.png")
			span #{label}:
			span(id="count")=count
	script.
		const websocketBase = '#{websocketLink}';
		const reconnectTimeout = 300000; //300 seconds = 5 minutes
		const messageTimeout = 15000;
		const volume = 0.2;
		
		var socket80, socket443;
		var audio = $('#audio')[0];
		var audioreversed = $('#audioreversed')[0];
		var message = $('#message');
		var waitTimeout;
		audio.volume = 0.2;
		connect();
		
		function animate(newText, doReverse){
			// reverse ding takes a while to go, so we should play it first
			if (doReverse) {
				audioreversed.pause();
				audioreversed.currentTime = 0;
				audioreversed.play();
			} 
			//down
			message.animate({
				top: '20px'
			}, 200, 'swing', () => {
				//bounceback
				message.animate({
					top: '0px'
				}, 200, 'swing', () => {
					//wait a little bit
					setTimeout(() => {
						//update message
						if (doReverse) {
							// if we're reversing, we should wait till the reverse ding is loud
							setTimeout(() => {
								$('#count').text(newText);
							}, 650);
						}
						else {
							$('#count').text(newText);
							//play audio
							audio.pause();
							audio.currentTime = 0;
							audio.play();
						}
						//wait for message timeout
						clearTimeout(waitTimeout);
						waitTimeout = setTimeout(() => {
							//bounce
							message.animate({
								top: '20px'
							}, 200, 'swing', () => {
								//bye
								message.animate({
									top: '-120px'
								}, 200, 'swing', () => {
									
								})
							});
						}, messageTimeout)
					}, 100);
				});
			});
		}
		
		function connect(){
			var options = {
				maxReconnectAttempts: 5,
				timeoutInterval: 2500,
				reconnectDecay: 1.8,
			}
			console.log('Connecting...');
			//connect
			try {
				socket80 = new ReconnectingWebSocket(`ws:/${websocketBase}:80/LDC`, null, options);
				socket80.onopen = () => {
					socket80.send('Ping');
					console.log('Successfully connected to :80');
					//only add onclose event after successful connection
					socket80.onclose = onclose;
				};
				socket80.onmessage = onmessage;
			} 
			catch(err) {
				console.log('Failed to start socket80');
			}
			try {
				socket443 = new ReconnectingWebSocket(`wss:/${websocketBase}:443/LDC`, null, options);
				socket443.onopen = () => {
					socket443.send('Ping');
					console.log('Successfully connected to :443');
					//only add onclose event after successful connection
					socket443.onclose = onclose;
				};
				socket443.onmessage = onmessage;
			}
			catch(err) {
				console.log('Failed to start socket443');
			}
		}
		
		function onclose(evt) {
			console.log(evt);
		}
		function onmessage(message) {
			var data = JSON.parse(message.data);
			var amount = parseInt(data.value);
			if (data.event === 'undo') {
				animate(amount, true);
			}
			else {
				animate(amount);
			}
		}